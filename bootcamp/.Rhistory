}
predict_df = get_diff_df(test, blah$prediction)
View(predict_df)
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict == test$model, 1, 0)
test = subset(test, test$diff == 1)
return(test)
}
View(predict_df)
predict_df = get_diff_df(test, blah$prediction)
View(predict_df)
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model, 1, 0)
test = subset(test, test$diff == 1)
return(test)
}
predict_df = get_diff_df(test, blah$prediction)
View(predict_df)
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model, 1, 0)
test = subset(test, test$diff == 1)
test$energy_type = ifelse(test$usage1 < 3 | test$usage2 < 3 | test$usage3 < 3, 'Elec', 'Fuel')
test$model = ifelse(test$energy_type == 'Elec' & test$predict == 1, '3PC', ifelse(test$energy_type == 'Elec' & test$predict == 0, '4P', ifelse(test$energy_type == 'Fuel' & test$predict == 1,'3PH', '4P')))
return(test)
}
predict_df = get_diff_df(test, blah$prediction)
blah$err_percent
compare_combine_df <- function(best_df, predict_df, all_model)
{
result = data.frame()
result2 = data.frame()
for (bdbid_n in unique(predict_df$bdbid))
{
energy_type = subset(predict_df$energy_type, predict_df$bdbid == bdbid_n)
for (energy in energy_type)
{
model = subset(predict_df$model, predict_df$bdbid == bdbid_n & predict_df$energy_type == energy)
temp = subset(best_df, best_df$bdbid == bdbid_n & best_df$energy_type == energy)
result = rbind(result, temp)
temp2 = subset(all_model, all_model$bdbid == bdbid_n & all_model$energy_type == energy & all_model$model_type == model)
result2 = rbind(result2, temp2)
}
}
predict_df$ls = result2$ls
predict_df$rs = result2$rs
predict_df$b_ls = result$ls
predict_df$b_rs = result$rs
predict_df$r2 = result2$r2
predict_df$b_r2 = result$r2
predict_df$cvrmse = result2$cv_rmse
predict_df$b_cvrmse = result$cv_rmse
return(predict_df)
}
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model, 1, 0)
test = subset(test, test$diff == 1)
test$energy_type = ifelse(test$usage1 < 3 | test$usage2 < 3 | test$usage3 < 3, 'Elec', 'Fuel')
test$model = ifelse(test$energy_type == 'Elec' & test$predict == 1, '3PC', ifelse(test$energy_type == 'Elec' & test$predict == 0, '4P', ifelse(test$energy_type == 'Fuel' & test$predict == 1,'3PH', '4P')))
test = test[,6:nrow(test)]
return(test)
}
predict_df = get_diff_df(test, blah$prediction)
View(test)
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model, 1, 0)
test = subset(test, test$diff == 1)
test$energy_type = ifelse(test$usage1 < 3 | test$usage2 < 3 | test$usage3 < 3, 'Elec', 'Fuel')
test$model = ifelse(test$energy_type == 'Elec' & test$predict == 1, '3PC', ifelse(test$energy_type == 'Elec' & test$predict == 0, '4P', ifelse(test$energy_type == 'Fuel' & test$predict == 1,'3PH', '4P')))
test = test[,7:ncol(test)]
return(test)
}
predict_df = get_diff_df(test, blah$prediction)
View(predict_df)
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model, 1, 0)
test = subset(test, test$diff == 1)
test$energy_type = ifelse(test$usage1 < 3 | test$usage2 < 3 | test$usage3 < 3, 'Elec', 'Fuel')
test$model = ifelse(test$energy_type == 'Elec' & test$predict == 1, '3PC', ifelse(test$energy_type == 'Elec' & test$predict == 0, '4P', ifelse(test$energy_type == 'Fuel' & test$predict == 1,'3PH', '4P')))
test = test[,c('bdbid', 'model', 'energy_type')]
return(test)
}
predict_df = get_diff_df(test, blah$prediction)
predict_df = compare_combine_df(best_df, predict_df, all_model)
write.csv(predict_df, '/users/tinnaing/desktop/diff_fdny_fy2017_p12.csv')
court_u_17 = read.csv('/users/tinnaing/desktop/stuff/datasests2/utility_Courthouse_fy2017_p24.csv')
court_u_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Courthouse_fy2017_p24.csv')
court_u_16 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Courthouse_fy2016_p24.csv')
court_u_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Courthouse_fy2015_p24.csv')
court_u_14 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Courthouse_fy2014_p24.csv')
court_b_17 = read.csv('/users/tinnaing/destkop/stuff/datasets2/best_models_Courthouse_fy2017_p24.csv')
court_b_17 = read.csv('/users/tinnaing/destkop/stuff/datasets2/best_models_Courthouse_fy2017_p24.csv')
court_b_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Courthouse_fy2017_p24.csv')
court_b_16 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Courthouse_fy2016_p24.csv')
court_b_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Courthouse_fy2015_p24.csv')
court_b_14 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Courthouse_fy2014_p24.csv')
lib_b_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Library_fy2017_p24.csv')
lib_b_16 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Library_fy2016_p24.csv')
lib_b_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Library_fy2015_p24.csv')
lib_b_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Library_fy2015_p24.csv')
lib_b_14 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Library_fy2014_p24.csv')
lib_u_14 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Library_fy2014_p24.csv')
lib_u_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Library_fy2015_p24.csv')
lib_u_16 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Library_fy2016_p24.csv')
lib_u_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Library_fy2017_p24.csv')
?wsrf
off_u_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Office_fy2017_p24.csv')
off_u_16 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Office_fy2016_p24.csv')
off_u_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Office_fy2015_p24.csv')
off_u_14 = read.csv('/users/tinnaing/desktop/stuff/datasets2/utility_Office_fy2014_p24.csv')
off_b_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Office_fy2014_p24.csv')
off_b_17 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Office_fy2017_p24.csv')
off_b_16 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Office_fy2016_p24.csv')
off_b_15 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Office_fy2015_p24.csv')
off_b_14 = read.csv('/users/tinnaing/desktop/stuff/datasets2/best_models_Office_fy2014_p24.csv')
library(plotly)
library(caret)
cluster_model <- function (x, y, k)
{
utility = cbind(x, y)
grputil = kmeans(utility, centers=k)
o = grputil$cluster+0
clustered = cbind(x, y, o)
colnames(clustered) = c("x", "y", "key")
clustered = data.frame(clustered)
return(clustered)
}
make_avg_df_func <- function(temp_df, bdbid_n, energy)
{
util = subset(temp_df, temp_df$bdbid == bdbid_n & temp_df$energy_type == energy)
#temp_cluster = cluster_model(util$OAT, util$usage, 3)
df = data.frame(x = util$OAT, y = util$usage)
df = decide_break_func(df, 'OAT')
usage_df_1 = subset(df, df$key == 1)
usage_df_2 = subset(df, df$key == 2)
usage_df_3 = subset(df, df$key == 3)
avg_usage = c(mean(usage_df_1$y), mean(usage_df_2$y), mean(usage_df_3$y))
avg_temp = c(mean(usage_df_1$x), mean(usage_df_2$x), mean(usage_df_3$x))
avg_df = t(data.frame(c(avg_temp,avg_usage)))
colnames(avg_df) = c('OAT1', 'OAT2', 'OAT3', 'usage1', 'usage2', 'usage3') #f(oat) = usage, model = g(oat,f(oat))
rownames(avg_df) = NULL
avg_df = data.frame(avg_df)
avg_df$bdbid = bdbid_n
return(avg_df)
}
fig_func <- function(df)
{
fig = add_trace(p = plot_ly(), x = ~df$x, y =~df$y, type = 'scatter', mode = 'markers', marker = list(color = ifelse(df$key == 1, 'rgba(51, 113, 213, 1)', ifelse(df$key == 2, 'rgba(38, 114, 38, 1)', 'rgba(240, 24, 28,1)'))), hoverinfo = 'text',
text = ~paste('Cluster: ', df$key,
'</br> </br> OAT: ', df$x,
'</br> Usage: ', df$y))
return(fig)
}
decide_break_func <- function(df, keyword)
{
if (keyword == 'Usage')
{
df = df[with(df, order(y)),]
df$key = rep(1:3, each=4)
}else if(keyword == 'OAT')
{
df = df[with(df, order(x)),]
df$key = rep(1:3, each=4)
}else
{
df = cluster_heirarchical_model(df$x, df$y, 3)
}
return (df)
}
cluster_heirarchical_model <- function (x, y, k)
{
utility <- cbind(x, y)
clusters <- hclust(dist(utility))
clusterCut <- cutree(clusters, k)
o <- as.array(clusterCut)
clustered <- data.frame(x, y, o)
colnames(clustered) = c("x", "y", "key")
return(clustered)
}
temp_func <- function(temp_df, bdbid_n, energy)
{
util = subset(temp_df, temp_df$bdbid == bdbid_n & temp_df$energy_type == energy)
#temp_cluster = cluster_model(util$OAT, util$usage, 3)
df = data.frame(x = util$OAT, y = util$usage)
df = decide_break_func(df, 'c')
usage_df_1 = subset(df, df$key == 1)
usage_df_2 = subset(df, df$key == 2)
usage_df_3 = subset(df, df$key == 3)
avg_usage = c(mean(usage_df_1$y), mean(usage_df_2$y), mean(usage_df_3$y))
p = fig_func(df)
return(list(p = p, avg_usage = avg_usage))
}
main_func <- function(temp_df, best_model)
{
final_df = data.frame()
best_model = subset(best_model, best_model$model_type == '3PC' | best_model$model_type == '3PH' | best_model$model_type == '4P')
for (bdbid_n in unique(best_model$bdbid))
{
best_energy_type = subset(best_model$energy_type, best_model$bdbid == bdbid_n)
for (energy in best_energy_type)
{
avg_df = make_avg_df_func(temp_df, bdbid_n, energy)
model = subset(best_model$model_type, best_model$bdbid == bdbid_n & best_model$energy_type == energy)
model = ifelse(model == '3PC' | model == '3PH', 1, 0) #1 if 3P and 0 if 4P
avg_df$model = model
final_df = rbind(final_df, avg_df)
}
}
return(final_df)
}
train_test_func <- function(train, test, method_n)
{
train_set = train[,1:6]
train_outcome = as.factor(train$model)
test_set = test[,1:6]
test_act_outcome = test$model
model = train(train_set, train_outcome, method = method_n)
outcome = predict.train(object=model,test_set,type="raw")
tf_vec = (outcome == test_act_outcome)
t = subset(tf_vec, tf_vec == TRUE)
f = subset(tf_vec, tf_vec == FALSE)
err_percent = 100*length(f)/length(tf_vec)
return(list(prediction = outcome, err_percent= err_percent))
}
#get boo
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model, 1, 0)
test = subset(test, test$diff == 1)
test$energy_type = ifelse(test$usage1 < 3 | test$usage2 < 3 | test$usage3 < 3, 'Elec', 'Fuel')
test$model = ifelse(test$energy_type == 'Elec' & test$predict == 1, '3PC', ifelse(test$energy_type == 'Elec' & test$predict == 0, '4P', ifelse(test$energy_type == 'Fuel' & test$predict == 1,'3PH', '4P')))
test = test[,c('bdbid', 'model', 'energy_type')]
return(test)
}
compare_combine_df <- function(best_df, predict_df, all_model)
{
result = data.frame()
result2 = data.frame()
for (bdbid_n in unique(predict_df$bdbid))
{
energy_type = subset(predict_df$energy_type, predict_df$bdbid == bdbid_n)
for (energy in energy_type)
{
model = subset(predict_df$model, predict_df$bdbid == bdbid_n & predict_df$energy_type == energy)
temp = subset(best_df, best_df$bdbid == bdbid_n & best_df$energy_type == energy)
result = rbind(result, temp)
temp2 = subset(all_model, all_model$bdbid == bdbid_n & all_model$energy_type == energy & all_model$model_type == model)
result2 = rbind(result2, temp2)
}
}
predict_df$ls = result2$ls
predict_df$rs = result2$rs
predict_df$b_ls = result$ls
predict_df$b_rs = result$rs
predict_df$r2 = result2$r2
predict_df$b_r2 = result$r2
predict_df$cvrmse = result2$cv_rmse
predict_df$b_cvrmse = result$cv_rmse
return(predict_df)
}
off_17 = main_func(off_u_17, off_b_17)
off_16 = main_func(off_u_16, off_b_16)
off_15 = main_func(off_u_15, off_b_15)
off_14 = main_func(off_u_14, off_b_14)
decide_break_func <- function(df, keyword)
{
if (keyword == 'Usage')
{
df = df[with(df, order(y)),]
df$key = rep(1:3, each=8)
}else if(keyword == 'OAT')
{
df = df[with(df, order(x)),]
df$key = rep(1:3, each=8)
}else
{
df = cluster_heirarchical_model(df$x, df$y, 3)
}
return (df)
}
off_15 = main_func(off_u_15, off_b_15)
off_14 = main_func(off_u_14, off_b_14)
off_16 = main_func(off_u_16, off_b_16)
off_17 = main_func(off_u_17, off_b_17)
off = rbind(off_17, off_16, off_15, off_14)
View(off)
court_17 = main_func(court_u_17, court_b_17)
court_16 = main_func(court_u_16, court_b_16)
court_15 = main_func(court_u_15, court_b_15)
court_14 = main_func(court_u_14, court_b_14)
court = rbind(court_17, court_16, court_15, court_14)
View(court)
lib_17 = main_func(lib_u_17, lib_b_17)
lib_16 = main_func(lib_u_16, lib_b_16)
lib_15 = main_func(lib_u_15, lib_b_15)
lib_14 = main_func(lib_u_14, lib_b_14)
lib = rbind(lib_17, lib_16, lib_15, lib_14)
View()lib
View(lib)
final = rbind(lib, off, court)
View(final)
fdny_b_17 = read.csv('/users/tinnaing/desktop/best_models_FDNY_fy2017_p24.csv')
fdny_u_17 = read.csv('/users/tinnaing/desktop/utility_FDNY_fy2017_p24.csv')
t = unique(fdny_b_17$bdbid) %in% unique(final$bdbid)
View(t)
t == TRUE
subset(fdny_b_17$bdbid, t)
fdny_b_17 = subset(fdny_b_17, fdny_b_17$bdbid != 4081 & fdny_b_17$bdbid !=9550)
fdny_17 = main_func(fdny_u_17,fdny_b_17)
View(fdny_17)
write.csv(final, '/users/tinnaing/desktop/stuff/svm/final_p24.csv')
write.csv(fdny_17, '/users/tinnaing/desktop/stuff/svm/test_p24.csv')
result = train_test_func(final, fdny_17, 'wsrf')
result$err_percent
predict_df = get_diff_df(test, result$prediction)
predict_df = get_diff_df(fdny_17, result$prediction)
all_model = read.csv('/users/tinnaing/destkop/rejected_models_FDNY_fy2017_p24.csv')
all_model = read.csv('/users/tinnaing/destkop/rejected_models_FDNY_fy2017_p24.csv')
all_model = read.csv('/users/tinnaing/desktop/rejected_models_FDNY_fy2017_p24.csv')
View(predict_df )
View(fdny_17)
predict_df = compare_combine_df(fdny_b_17, predict_df, all_model)
View(predict_df)
write.csv(predict_df, '/users/tinnaing/destkop/diff_fdny_fy2017_p24.csv')
write.csv(predict_df, '/users/tinnaing/desktop/diff_fdny_fy2017_p24.csv')
?trainControl
?train
?expand.grid
?wsrf
blah = read.csv('/users/tinnaing/desktop/stuff/4P-3PC-comparison.csv')
View(blah)
blah = read.xlsx('/users/tinnaing/desktop/stuff/4P-3PC-comparison.xlsx')
install.packages('openxlsx')
library(openxlsx)
blah = read.xlsx('/users/tinnaing/desktop/stuff/4P-3PC-comparison.xlsx')
unique(blah$FY)
fdny_17_34 = subset(blah, blah$FY == 2017)
View(fdny_17_34)
fdny_17 = read.csv('/users/tinnaing/desktop/stuff/svm/diff_fdny_fy2017_p24.csv')
View(fdny_17)
bdbid_obs = unique(fdny_17$bdbid)
unique(fdny_17$energy_type)
bdbid_obs = unique(subset(fdny_17$bdbid, fdny_17$energy_type == 'Elec'))
length(bdbid_obs)
fdny_mod_17 = read.csv('/users/tinnaing/desktop/stuff/p24/modeller_FDNY_fy2017_p24.csv')
View(fdny_mod_17)
org = read.csv('/users/tinnaing/desktop/stuff/p24/modeller_FDNY_fy2017_p24.csv')
fdny_mod_17 = subset(org, org$model_type != 2P & org$energy_type == 'Elec' & org$main_test == 'Pass')
fdny_mod_17 = subset(org, org$model_type != '2P' & org$energy_type == 'Elec' & org$main_test == 'Pass')
View(fdny_mod_17)
unique(fdny_mod_17$model_type)
subset(fdny_mod_17, fdny_mod_17$model_type == '3PH')
fdny_mod_17 = subset(org, org$energy_type == 'Elec' & org$main_test == 'Pass')
fdny_mod_17 = subset(fdny_mod_17, fdny_mod_17$model_type == '3PC' | fdny_mod_17$model_type == '4P')
View(fdny_mod_17)
final_mod = subset(fdny_mod_17, bdbid_obs %in% unique(fdny_mod_17$bdbid))
View(final_mod)
mod_bdbid = unique(final_mod$bdbid)
len(mod_bdbid)
length(mod_bdbid)
final_mod = subset(fdny_mod_17, unique(fdny_mod_17$bdbid) %in% bdbid_obs)
length(mod_bdbid)
length(bdbid_obs)
mod_bdbid = unique(final_mod$bdbid)
length(mod_bdbid)
fdny_17 = read.csv('/users/tinnaing/desktop/stuff/svm/diff_fdny_fy2017_p24.csv')
View(fdny_17)
bdbid_obs = unique(fdny_17$bdbid)
length(bdbid_obs)
fdny_17 = subset(fdny_17, fdny_17$energy_type == 'Elec')
bdbid_obs = unique(fdny_17$bdbid)
length(bdbid_obs)
final_mod = subset(fdny_mod_17, unique(fdny_mod_17$bdbid) %in% bdbid_obs)
View(final_mod)
mod_bdbid = unique(final_mod$bdbid)
length(mod_bdbid)
View(mod_bdbid)
mod_bdbid
bdbid_obs
3618 %in% bdbid_obs
final_mod = subset(fdny_mod_17, unique(fdny_mod_17$bdbid) %in% bdbid_obs)
modeller = read.csv('/users/tinnaing/desktop/stuff/p24/modeller_FDNY_fy2017_p24.csv')
modeller_extractor <- function(modeller, energy)
{
temp = subset(modeller, modeller$energy_type = energy & modeller$main_test = 'Pass')
if (energy == 'Elec')
{
temp = subset(temp, temp$model_type == '3PC' | temp$model_type == '4P')
}else
{
temp = subset(temp, temp$model_type == '3PH' | temp$model_type == '4P')
}
return(temp)
}
modeller_extractor <- function(modeller, energy)
{
temp = subset(modeller, modeller$energy_type = energy & modeller$main_test = 'Pass')
if (energy == 'Elec')
{
temp = subset(temp, temp$model_type == '3PC' | temp$model_type == '4P')
}else
{
temp = subset(temp, temp$model_type == '3PH' | temp$model_type == '4P')
}
return(temp)
}
modeller_extractor <- function(modeller, energy)
{
temp = subset(modeller, modeller$energy_type == energy & modeller$main_test == 'Pass')
if (energy == 'Elec')
{
temp = subset(temp, temp$model_type == '3PC' | temp$model_type == '4P')
}else
{
temp = subset(temp, temp$model_type == '3PH' | temp$model_type == '4P')
}
return(temp)
}
mod_ex = modeller_extractor(modeller, 'Elec')
unique(mod_ex$model_type)
unique(mod_ex$energy_type)
View(mod_ex)
fdny_17 = read.csv('/users/tinnaing/desktop/stuff/svm/diff_fdny_fy2017_p24.csv')
View(fdny_17)
temp_bdbid = unique(mod_ex$bdbid)
length(temp_bdbid)
final_mod= subset(mod_ex, unique(mod_ex$bdbid) %in% unique(fdny_17$bdbid))
length(unique(final_mod$bdbid))
match(1368, c(1324))
match(1368, c(1368))
match(c(1368), c(1368))
fdny_17_elec = subset(fdny_17, fdny_17$energy_type == 'Elec')
View(fdny_17_elec)
bdbid = unique(fdny_17_elec$bdbid)
temp = data.frame()
for (bdbid_n in bdbid)
{
df = subset(mod_ex, mod_ex$bdbid == bdbid_n)
temp = rbind(temp, df)
}
View(temp)
length(unique(temp$bdbid))
row.names(temp) = c(1:length(temp))
row.names(temp) = c(1:nrow(temp))
View(temp)
?duplicated
temp[duplicated(temp$bdbid),]
blah = temp[duplicated(temp$bdbid),]
length(unique(blah$bdbid))
final = data.frame()
for (bdbid_n in unique(blah$bdbid))
{
df = subset(temp, temp$bdbid == bdbid_n)
final = rbind(final, df)
}
length(unique(final$bdbid))
View(final)
test = data.frame()
for(bdbid_n in unique(final$bdbid))
{
df = subset(fdny_17_elec, fdny_17_elec$bdbid == bdbid_n)
test = rbind(test, df)
}
length(unique(test$bdbid))
View(test)
View(final)
?write.csv
write.csv(final, '/users/tinnaing/desktop/final.csv', row.names = FALSE)
write.csv(test, '/users/tinnaing/desktop/test.csv', row.names = FALSE)
View(final)
View(test)
shiny::runApp('Desktop/shinyApps/boot_camp')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/boot_camp', account = 'cunybpl')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/boot_camp', account = 'cunybpl')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
runApp('Desktop/shinyApps/bootcamp')
