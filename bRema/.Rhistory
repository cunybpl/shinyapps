util = read.csv('/users/tinnaing/desktop/stuff/p24/utility_fdny_fy2017_p24.csv')
best = read.csv('/users/tinnaing/desktop/stuff/p24/best_model_fdny_fy2017_p24.csv')
best = read.csv('/users/tinnaing/desktop/stuff/p24/best_models_fdny_fy2017_p24.csv')
t = main_func(util, best)
View(t)
x = unique(t$bdbid)
y = unique(test$bdbid)
x[!(x %in% y)]
?werf
??wsrf
a = train_test_func(test, final)
a = train_test_func(test, final)
a = train_test_func(final, test)
View(final)
View(test)
final = final[, 2:ncols(final)]
final = final[, 2:ncol(final)]
test = test[, 2:ncol(test)]
a = train_test_func(final, test)
View(final)
View(test)
train = test
train = final
train_set = train[,1:6]
View(train_set)
train_outcome = as.factor(train$model_type)
test_set = test[,1:6]
test_act_outcome = test$model_type
View(test_act_outcome)
test_act_outcome
View(test)
remove(list = ls())
remove(list = ls())
final = read.csv('/users/tinnaing/desktop/stuff/svm/final_p24.csv')
test = read.csv('/users/tinnaing/desktop/stuff/svm/test_p24.csv')
View(final)
library(plotly)
library(caret)
#transform a utility frame to 48 dimension or something, only for
transform_utility_func <- function(utility, best_model)
{
temp0 = data.frame()
for (bdbid_n in unique(best_model$bdbid))
{
energy_vec = unique(subset(best_model$energy_type, best_model$bdbid == bdbid_n))
temp1 = data.frame()
energy_n = 'Elec'
if (energy_n %in% energy_vec) #for loop here if you want to include 'fuel'
{
model = subset(best_model$model_type, best_model$bdbid == bdbid_n & best_model$energy_type == energy_n)
if (model %in% c('3PC', '4P')) #for other model just get rid of this if statement
{
temp = subset(utility, utility$energy_type == energy_n & utility$bdbid == bdbid_n)
temp = temp[,c('usage', 'OAT')]
temp_usage = t(data.frame(temp$usage))
temp_OAT = t(data.frame(temp$OAT))
#colnames(temp_usage) = c('usage1','usage2','usage3','usage4','usage5','usage6','usage7','usage8','usage9','usage10','usage11','usage12','usage13','usage14','usage15','usage16','usage17','usage18','usage19','usage20','usage21','usage22','usage23','usage24')
#colnames(temp_OAT) = c('OAT1','OAT2','OAT3','OAT4','OAT5','OAT6','OAT7','OAT8','OAT9','OAT10','OAT11','OAT12','OAT13', 'OAT14','OAT15','OAT16','OAT17','OAT18','OAT19','OAT20','OAT21','OAT22','OAT23','OAT24')
model = ifelse(model == '3PC', 1,0)
temp_df = cbind(data.frame(bdbid = bdbid_n, energy_type = energy_n, model_type = model), temp_usage, temp_OAT)
temp1 = rbind(temp1, temp_df)
temp0 = rbind(temp0, temp1)
}
}
}
col_usage = c('usage1','usage2','usage3','usage4','usage5','usage6','usage7','usage8','usage9','usage10','usage11','usage12','usage13','usage14','usage15','usage16','usage17','usage18','usage19','usage20','usage21','usage22','usage23','usage24')
col_OAT = c('OAT1','OAT2','OAT3','OAT4','OAT5','OAT6','OAT7','OAT8','OAT9','OAT10','OAT11','OAT12','OAT13', 'OAT14','OAT15','OAT16','OAT17','OAT18','OAT19','OAT20','OAT21','OAT22','OAT23','OAT24')
rownames(temp0) = c(1:nrow(temp0))
colnames(temp0) = c('bdbid','energy_type','model_type',col_usage, col_OAT)
return(temp0)
}
cluster_model <- function (x, y, k)
{
utility = cbind(x, y)
grputil = kmeans(utility, centers=k)
o = grputil$cluster+0
clustered = cbind(x, y, o)
colnames(clustered) = c("x", "y", "key")
clustered = data.frame(clustered)
return(clustered)
}
make_avg_df_func <- function(temp_df, bdbid_n, energy)
{
util = subset(temp_df, temp_df$bdbid == bdbid_n & temp_df$energy_type == energy)
#temp_cluster = cluster_model(util$OAT, util$usage, 3)
df = data.frame(x = util$OAT, y = util$usage)
df = decide_break_func(df, 'OAT')
usage_df_1 = subset(df, df$key == 1)
usage_df_2 = subset(df, df$key == 2)
usage_df_3 = subset(df, df$key == 3)
avg_usage = c(mean(usage_df_1$y), mean(usage_df_2$y), mean(usage_df_3$y))
avg_temp = c(mean(usage_df_1$x), mean(usage_df_2$x), mean(usage_df_3$x))
avg_df = t(data.frame(c(avg_temp,avg_usage)))
colnames(avg_df) = c('OAT1', 'OAT2', 'OAT3', 'usage1', 'usage2', 'usage3') #f(oat) = usage, model = g(oat,f(oat))
rownames(avg_df) = NULL
avg_df = data.frame(avg_df)
avg_df$bdbid = bdbid_n
return(avg_df)
}
fig_func <- function(df)
{
fig = add_trace(p = plot_ly(), x = ~df$x, y =~df$y, type = 'scatter', mode = 'markers', marker = list(color = ifelse(df$key == 1, 'rgba(51, 113, 213, 1)', ifelse(df$key == 2, 'rgba(38, 114, 38, 1)', 'rgba(240, 24, 28,1)'))), hoverinfo = 'text',
text = ~paste('Cluster: ', df$key,
'</br> </br> OAT: ', df$x,
'</br> Usage: ', df$y))
return(fig)
}
decide_break_func <- function(df, keyword)
{
if (keyword == 'Usage')
{
df = df[with(df, order(y)),]
df$key = rep(1:3, each=8)
}else if(keyword == 'OAT')
{
df = df[with(df, order(x)),]
df$key = rep(1:3, each=8)
}else
{
df = cluster_heirarchical_model(df$x, df$y, 3)
}
return (df)
}
cluster_heirarchical_model <- function (x, y, k)
{
utility <- cbind(x, y)
clusters <- hclust(dist(utility))
clusterCut <- cutree(clusters, k)
o <- as.array(clusterCut)
clustered <- data.frame(x, y, o)
colnames(clustered) = c("x", "y", "key")
return(clustered)
}
temp_func <- function(temp_df, bdbid_n, energy)
{
util = subset(temp_df, temp_df$bdbid == bdbid_n & temp_df$energy_type == energy)
#temp_cluster = cluster_model(util$OAT, util$usage, 3)
df = data.frame(x = util$OAT, y = util$usage)
df = decide_break_func(df, 'c')
usage_df_1 = subset(df, df$key == 1)
usage_df_2 = subset(df, df$key == 2)
usage_df_3 = subset(df, df$key == 3)
avg_usage = c(mean(usage_df_1$y), mean(usage_df_2$y), mean(usage_df_3$y))
p = fig_func(df)
return(list(p = p, avg_usage = avg_usage))
}
#use this to make training and test data sets, then use train_test_func for result
main_func <- function(temp_df, best_model)
{
final_df = data.frame()
best_model = subset(best_model, best_model$model_type == '3PC' | best_model$model_type == '3PH' | best_model$model_type == '4P')
for (bdbid_n in unique(best_model$bdbid))
{
best_energy_type = subset(best_model$energy_type, best_model$bdbid == bdbid_n)
for (energy in best_energy_type)
{
avg_df = make_avg_df_func(temp_df, bdbid_n, energy)
model = subset(best_model$model_type, best_model$bdbid == bdbid_n & best_model$energy_type == energy)
model = ifelse(model == '3PC' | model == '3PH', 1, 0) #1 if 3P and 0 if 4P
avg_df$model_type = model
final_df = rbind(final_df, avg_df)
}
}
return(final_df)
}
#weighted subspace random forest as default method
train_test_func <- function(train, test, method_n = 'wsrf')
{
train_set = train[,1:6]
train_outcome = as.factor(train$model_type)
test_set = test[,1:6]
test_act_outcome = test$model_type
model = train(train_set, train_outcome, method = method_n)
outcome = predict.train(object=model,test_set,type="raw")
tf_vec = (outcome == test_act_outcome)
t = subset(tf_vec, tf_vec == TRUE)
f = subset(tf_vec, tf_vec == FALSE)
err_percent = 100*length(f)/length(tf_vec)
return(list(prediction = outcome, err_percent= err_percent))
}
#use this for 48+ dim, the first three colums are: bdbid, energy_type, and model_type, the rest are usage and OAT in that order.
train_test_func_2 <- function(train, test, method_n = 'wsrf')
{
train_set = train[,4:51] #change stuff here
train_outcome = as.factor(train$model_type)
test_set = test[,4:51]
test_act_outcome = test$model_type
model = train(train_set, train_outcome, method = method_n)
outcome = predict.train(object=model,test_set,type="raw")
tf_vec = (outcome == test_act_outcome)
t = subset(tf_vec, tf_vec == TRUE)
f = subset(tf_vec, tf_vec == FALSE)
err_percent = 100*length(f)/length(tf_vec)
return(list(prediction = outcome, err_percent= err_percent))
}
#here we are trying to figure which ones are labelled wrong, call it after train_test_func
get_diff_df <- function(test, result)
{
test$predict = result
test$diff = ifelse(test$predict != test$model_type, 1, 0)
test = subset(test, test$diff == 1)
test$energy_type = ifelse(test$usage1 < 3 | test$usage2 < 3 | test$usage3 < 3, 'Elec', 'Fuel')
test$model_type = ifelse(test$energy_type == 'Elec' & test$predict == 1, '3PC', ifelse(test$energy_type == 'Elec' & test$predict == 0, '4P', ifelse(test$energy_type == 'Fuel' & test$predict == 1,'3PH', '4P')))
test = test[,c('bdbid', 'model_type', 'energy_type')]
return(test)
}
#extract 3P and 4P from modeller.csv
modeller_extractor <- function(modeller, energy)
{
temp = subset(modeller, modeller$energy_type == energy & modeller$main_test == 'Pass')
if (energy == 'Elec')
{
temp = subset(temp, temp$model_type == '3PC' | temp$model_type == '4P')
}else
{
temp = subset(temp, temp$model_type == '3PH' | temp$model_type == '4P')
}
return(temp)
}
compare_combine_func <- function(best_df, predict_df, all_model)
{
result = data.frame()
result2 = data.frame()
for (bdbid_n in unique(predict_df$bdbid))
{
energy_type = subset(predict_df$energy_type, predict_df$bdbid == bdbid_n)
for (energy in energy_type)
{
model = subset(predict_df$model_type, predict_df$bdbid == bdbid_n & predict_df$energy_type == energy)
temp = subset(best_df, best_df$bdbid == bdbid_n & best_df$energy_type == energy)
result = rbind(result, temp)
temp2 = subset(all_model, all_model$bdbid == bdbid_n & all_model$energy_type == energy & all_model$model_type == model)
result2 = rbind(result2, temp2)
}
}
predict_df$ls = result2$ls
predict_df$rs = result2$rs
predict_df$b_ls = result$ls
predict_df$b_rs = result$rs
predict_df$r2 = result2$r2
predict_df$b_r2 = result$r2
predict_df$cvrmse = result2$cv_rmse
predict_df$b_cvrmse = result$cv_rmse
return(predict_df)
}
#using the result from machine learning and modeller, return all buildings that may or may not have been misclassifed as 3PC or 4P , this returns df needed for heat_load
extract_modeller_34 <- function(diff, modeller)
{
diff = subset(diff, diff$energy_type == 'Elec')
df = subset(modeller, modeller$bdbid %in% diff$bdbid & modeller$energy_type == 'Elec')
df = subset(df, df$main_test == 'Pass' & (df$model_type == '3PC' | df$model_type == '4P'))
temp = df[duplicated(df$bdbid),]$bdbid
final = subset(df, df$bdbid %in% temp)
return(final)
}
#calculates heating load for 3PC for each faciltity, called in main_heat_load_3pc
calc_heat_load <- function(ind_util, cp, ycp)
{
df = subset(ind_util, ind_util$OAT < cp)
df$end_date = strptime(df$end_date, format = "%Y-%m-%d")
df$day = as.numeric(format(df$end_date, format = "%d"))
df$calc = ifelse(df$OAT < cp, ifelse((df$usage - ycp)*df$day > 0, (df$usage - ycp)*df$day, 0), 0)
heat_load  = sum(df$calc)
return(heat_load)
}
#this handles calculaing heat load
main_heat_load_3pc <- function(utility, modeller_df)
{
heat_load_3pc = data.frame()
df_3pc = subset(modeller_df, modeller_df$model_type == '3PC' & modeller_df$energy_type == 'Elec' & modeller_df$main_test == 'Pass')
for (bdbid_n in df_3pc$bdbid)
{
cp = subset(df_3pc$xcp1, df_3pc$bdbid == bdbid_n)
ycp = subset(df_3pc$ycp, df_3pc$bdbid == bdbid_n)
ind_util = subset(utility, utility$bdbid == bdbid_n & utility$energy_type == 'Elec')
heat_load = calc_heat_load(ind_util, cp, ycp)
temp = data.frame(bdbid = bdbid_n, heat_load = heat_load)
heat_load_3pc = rbind(heat_load_3pc, temp)
}
return(heat_load_3pc)
}
#handles getting information about heat_load for 4p
get_heat_load_4p <- function(post_modeller)
{
post_modeller = subset(post_modeller, post_modeller$energy_type == 'Elec' & post_modeller$model_type == '4P')
heat_load_4p = post_modeller[,c('bdbid', 'heat_load')]
return(heat_load_4p)
}
#call main_heat_load_3pc and get_heat_load_4p, then use this
combine_heat_load_info <- function(df, heat_load_3pc, heat_load_4p)
{
heat_load = c()
for (bdbid_n in unique(df$bdbid))
{
temp_heat_load = c()
for (model in c('3PC', '4P'))
{
temp = ifelse(model == '3PC', subset(heat_load_3pc$heat_load, heat_load_3pc$bdbid == bdbid_n), subset(heat_load_4p$heat_load, heat_load_4p$bdbid == bdbid_n))
temp_heat_load = c(temp_heat_load, temp)
}
heat_load = c(heat_load, temp_heat_load)
}
df$heat_load = heat_load
return(df)
}
#calculate heating load percent
calc_percent_heat_load <- function(df)
{
heat_3p = subset(df$heat_load, df$model_type == '3PC')
heat_4p = subset(df$heat_load, df$model_type == '4P')
heat_percent = 100*abs(heat_4p-heat_3p)/heat_4p
temp = data.frame(bdbid = unique(df$bdbid), heat_3p = heat_3p, heat_4p = heat_4p, heat_percent = heat_percent)
temp1 = c()
for (i in seq(1,nrow(df)))
{
if (df$model_type[i] == '3PC')
{
temp0 = subset(temp$heat_percent, temp$bdbid == df$bdbid[i])
temp1 = c(temp1, temp0)
}
else
{
temp0 = 0
temp1 = c(temp1, temp0)
}
}
df$heat_percent = temp1
return(df)
}
#use df spit out from combine_heat_load_info
get_consumption <- function(df, post_modeller)
{
consumption_vec = c()
for (bdbid_n in df$bdbid)
{
temp = subset(post_modeller$total_consumption, post_modeller$bdbid == bdbid_n & post_modeller$energy_type == 'Elec')
consumption_vec = c(consumption_vec, temp)
}
df$total_consumption = consumption_vec
#df$heat_percent = 100 * df$heat_load/df$total_consumption
return(df)
}
library("wsrf", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
a = train_test_func(final, test)
install.packages('e1071')
a = train_test_func(final, test)
View(a)
?wsrf
??wsrf
??bRema
View(test)
utility = read.csv('/users/tinnaing/desktop/stuff/p24/utility_fdny_fy2017_p24.csv')
View(utility)
b = read.csv('/users/tinnaing/desktop/utility_FDNY_fy2017_p24.csv')
length(unique(b$bdbid))
modeller = read.csv('/users/tinnaing/desktop/modeller_FDNY_fy2017_p24.csv')
length(unique(modeller$bdbid))
355*0.14
355*0.15
View(b)
351*0.86
351*0.14
351*0.16
44/251
library("bRema", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
shiny::runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
remove.packages('bRema')
shiny::runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
colors = c("green","blue","red")
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel("Info",
fluidRow(
column(width = 6, offset = 0,
div(style = "height:50px;width:100%;background-color: #999999;border-style: solid;border-color: #000000",
tags$h3("Section 1")
)
),
column(width = 6, offset = 0,
div(style = "height:50px;width:100%;background-color: #999999;border-style: solid;border-color: #000000",
tags$h3("Section 2")
)
)
),
fluidRow(
column(width = 6, offset = 0,
div(style = "height:50px;width:100%;background-color: #999999;border-style: solid;border-color: #000000",
selectInput(inputId = "color",label = "color:",
choices = colors,
selected = colors[2],
multiple = FALSE)
)
),
column(width = 6, offset = 0,
div(style = "height:50px;width:100%;background-color: #999999;border-style: solid;border-color: #000000",
selectInput(inputId = "points",label = "Number of Points:",
choices = c("30","60","90"),
selected = "10",
multiple = FALSE)                      )
)
),
br(),
br(),
fluidRow(
actionButton(inputId = "go",
label = "Update"
)
),
fluidRow(
plotOutput("plot", width = "100%")
)
)
)
)
server <- function(input, output,session) {
data = eventReactive(input$go, {
var1 = rnorm(isolate(as.numeric(input$points)),5)
cat1 = c(rep("red",length(var1)/3),rep("blue",length(var1)/3),rep("green",length(var1)/3))
data = cbind.data.frame(var1,cat1)
plotdata = data[which(data$cat1 ==isolate(input$color)),]
}
)
output$plot = renderPlot({
plotdata = data()
plotcol = isolate(input$color)
plot(plotdata$var1, col = plotcol)
})
}
shinyApp(ui = ui,server = server)
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
?ncol
library("bRema", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
shiny::runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
utility = read.csv('/users/tinnaing/desktop/stuff.csv')
best_df = batch_run(utility)
main_post_model(utility, best_df, rank_flag = TRUE)
main_post_model(utility, best_df$best_result_df, rank_flag = TRUE)
shiny::runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
"bRema" %in% rownames(installed.packages())
brema_flag = "bRema" %in% rownames(installed.packages())
brema_flag
if (!brema_flag){"yes"}
if (!brema_flag){print("yes")}else{"no"}
runApp('Desktop/shinyApps/bRema')
runApp('Desktop/shinyApps/bRema')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bRema', account = 'cunybpl')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bRema', account = 'cunybpl')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bRema', account = 'cunybpl')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bRema', account = 'cunybpl')
shiny::runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
as.numeric("98,400.98")
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_unretrofit')
runApp('Desktop/shinyApps/remote_baseline')
runApp('Desktop/shinyApps/remote_baseline')
options
?options
?repos
??repos
runApp('Desktop/shinyApps/bRema')
remove.packages('bRema')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bRema', account = 'cunybpl')
install_github('tinnaing347/bRema')
library(bRema)
remove.packages('bRema')
library(devtools)
install_github('tinnaing347/bRema')
setwd('/users/tinnaing/desktop/shinyapps/bema')
rsconnect:::performPackratSnapshot(".")
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bema',account = 'cunybpl')
rsconnect::deployApp('/users/tinnaing/desktop/shinyapps/bRema',account = 'cunybpl')
